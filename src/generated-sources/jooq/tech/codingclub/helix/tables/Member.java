/*
 * This file is generated by jOOQ.
*/
package tech.codingclub.helix.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.codingclub.helix.Indexes;
import tech.codingclub.helix.Keys;
import tech.codingclub.helix.Twitter;
import tech.codingclub.helix.tables.records.MemberRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Member extends TableImpl<MemberRecord> {

    private static final long serialVersionUID = -767436398;

    /**
     * The reference instance of <code>twitter.member</code>
     */
    public static final Member MEMBER = new Member();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberRecord> getRecordType() {
        return MemberRecord.class;
    }

    /**
     * The column <code>twitter.member.name</code>.
     */
    public final TableField<MemberRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>twitter.member.email</code>.
     */
    public final TableField<MemberRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>twitter.member.password</code>.
     */
    public final TableField<MemberRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>twitter.member.role</code>.
     */
    public final TableField<MemberRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>twitter.member.id</code>.
     */
    public final TableField<MemberRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>twitter.member.image</code>.
     */
    public final TableField<MemberRecord, String> IMAGE = createField("image", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>twitter.member.token</code>.
     */
    public final TableField<MemberRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>twitter.member.is_verified</code>.
     */
    public final TableField<MemberRecord, Byte> IS_VERIFIED = createField("is_verified", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>twitter.member</code> table reference
     */
    public Member() {
        this(DSL.name("member"), null);
    }

    /**
     * Create an aliased <code>twitter.member</code> table reference
     */
    public Member(String alias) {
        this(DSL.name(alias), MEMBER);
    }

    /**
     * Create an aliased <code>twitter.member</code> table reference
     */
    public Member(Name alias) {
        this(alias, MEMBER);
    }

    private Member(Name alias, Table<MemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private Member(Name alias, Table<MemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitter.TWITTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBER_EMAIL_UNIQUE, Indexes.MEMBER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MemberRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MemberRecord> getPrimaryKey() {
        return Keys.KEY_MEMBER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MemberRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberRecord>>asList(Keys.KEY_MEMBER_EMAIL_UNIQUE, Keys.KEY_MEMBER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Member as(String alias) {
        return new Member(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Member as(Name alias) {
        return new Member(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(String name) {
        return new Member(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(Name name) {
        return new Member(name, null);
    }
}
