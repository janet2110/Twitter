/*
 * This file is generated by jOOQ.
*/
package tech.codingclub.helix.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.codingclub.helix.Indexes;
import tech.codingclub.helix.Keys;
import tech.codingclub.helix.Twitter;
import tech.codingclub.helix.tables.records.MusicRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Music extends TableImpl<MusicRecord> {

    private static final long serialVersionUID = -1514447797;

    /**
     * The reference instance of <code>twitter.music</code>
     */
    public static final Music MUSIC = new Music();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MusicRecord> getRecordType() {
        return MusicRecord.class;
    }

    /**
     * The column <code>twitter.music.parent_link</code>.
     */
    public final TableField<MusicRecord, String> PARENT_LINK = createField("parent_link", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>twitter.music.child_link</code>.
     */
    public final TableField<MusicRecord, String> CHILD_LINK = createField("child_link", org.jooq.impl.SQLDataType.VARCHAR(400).nullable(false), this, "");

    /**
     * The column <code>twitter.music.album</code>.
     */
    public final TableField<MusicRecord, String> ALBUM = createField("album", org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>twitter.music.duration</code>.
     */
    public final TableField<MusicRecord, String> DURATION = createField("duration", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>twitter.music.lyricist</code>.
     */
    public final TableField<MusicRecord, String> LYRICIST = createField("lyricist", org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>twitter.music.singers</code>.
     */
    public final TableField<MusicRecord, String> SINGERS = createField("singers", org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>twitter.music.music_director</code>.
     */
    public final TableField<MusicRecord, String> MUSIC_DIRECTOR = createField("music_director", org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>twitter.music.download_128</code>.
     */
    public final TableField<MusicRecord, String> DOWNLOAD_128 = createField("download_128", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>twitter.music.download_256</code>.
     */
    public final TableField<MusicRecord, String> DOWNLOAD_256 = createField("download_256", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>twitter.music.image_url</code>.
     */
    public final TableField<MusicRecord, String> IMAGE_URL = createField("image_url", org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * Create a <code>twitter.music</code> table reference
     */
    public Music() {
        this(DSL.name("music"), null);
    }

    /**
     * Create an aliased <code>twitter.music</code> table reference
     */
    public Music(String alias) {
        this(DSL.name(alias), MUSIC);
    }

    /**
     * Create an aliased <code>twitter.music</code> table reference
     */
    public Music(Name alias) {
        this(alias, MUSIC);
    }

    private Music(Name alias, Table<MusicRecord> aliased) {
        this(alias, aliased, null);
    }

    private Music(Name alias, Table<MusicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitter.TWITTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MUSIC_CHILD_LINK_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MusicRecord>> getKeys() {
        return Arrays.<UniqueKey<MusicRecord>>asList(Keys.KEY_MUSIC_CHILD_LINK_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Music as(String alias) {
        return new Music(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Music as(Name alias) {
        return new Music(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Music rename(String name) {
        return new Music(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Music rename(Name name) {
        return new Music(name, null);
    }
}
