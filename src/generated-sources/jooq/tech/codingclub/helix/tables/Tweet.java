/*
 * This file is generated by jOOQ.
*/
package tech.codingclub.helix.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.codingclub.helix.Indexes;
import tech.codingclub.helix.Keys;
import tech.codingclub.helix.Twitter;
import tech.codingclub.helix.tables.records.TweetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tweet extends TableImpl<TweetRecord> {

    private static final long serialVersionUID = -1640185523;

    /**
     * The reference instance of <code>twitter.tweet</code>
     */
    public static final Tweet TWEET = new Tweet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TweetRecord> getRecordType() {
        return TweetRecord.class;
    }

    /**
     * The column <code>twitter.tweet.message</code>.
     */
    public final TableField<TweetRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>twitter.tweet.id</code>.
     */
    public final TableField<TweetRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>twitter.tweet.created_at</code>.
     */
    public final TableField<TweetRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>twitter.tweet.author_id</code>.
     */
    public final TableField<TweetRecord, Long> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>twitter.tweet</code> table reference
     */
    public Tweet() {
        this(DSL.name("tweet"), null);
    }

    /**
     * Create an aliased <code>twitter.tweet</code> table reference
     */
    public Tweet(String alias) {
        this(DSL.name(alias), TWEET);
    }

    /**
     * Create an aliased <code>twitter.tweet</code> table reference
     */
    public Tweet(Name alias) {
        this(alias, TWEET);
    }

    private Tweet(Name alias, Table<TweetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tweet(Name alias, Table<TweetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitter.TWITTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TWEET_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TweetRecord, Long> getIdentity() {
        return Keys.IDENTITY_TWEET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TweetRecord> getPrimaryKey() {
        return Keys.KEY_TWEET_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TweetRecord>> getKeys() {
        return Arrays.<UniqueKey<TweetRecord>>asList(Keys.KEY_TWEET_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tweet as(String alias) {
        return new Tweet(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tweet as(Name alias) {
        return new Tweet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tweet rename(String name) {
        return new Tweet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tweet rename(Name name) {
        return new Tweet(name, null);
    }
}
