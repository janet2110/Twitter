/*
 * This file is generated by jOOQ.
*/
package tech.codingclub.helix.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.codingclub.helix.Indexes;
import tech.codingclub.helix.Keys;
import tech.codingclub.helix.Twitter;
import tech.codingclub.helix.tables.records.FollowerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Follower extends TableImpl<FollowerRecord> {

    private static final long serialVersionUID = -21605726;

    /**
     * The reference instance of <code>twitter.follower</code>
     */
    public static final Follower FOLLOWER = new Follower();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowerRecord> getRecordType() {
        return FollowerRecord.class;
    }

    /**
     * The column <code>twitter.follower.user_id</code>.
     */
    public final TableField<FollowerRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>twitter.follower.following_id</code>.
     */
    public final TableField<FollowerRecord, Long> FOLLOWING_ID = createField("following_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>twitter.follower</code> table reference
     */
    public Follower() {
        this(DSL.name("follower"), null);
    }

    /**
     * Create an aliased <code>twitter.follower</code> table reference
     */
    public Follower(String alias) {
        this(DSL.name(alias), FOLLOWER);
    }

    /**
     * Create an aliased <code>twitter.follower</code> table reference
     */
    public Follower(Name alias) {
        this(alias, FOLLOWER);
    }

    private Follower(Name alias, Table<FollowerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Follower(Name alias, Table<FollowerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitter.TWITTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FOLLOWER_KEY2_IDX, Indexes.FOLLOWER_UNIQUE_INDEX, Indexes.FOLLOWER_USER_ID, Indexes.FOLLOWER_USER_ID_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FollowerRecord>> getKeys() {
        return Arrays.<UniqueKey<FollowerRecord>>asList(Keys.KEY_FOLLOWER_UNIQUE_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FollowerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FollowerRecord, ?>>asList(Keys.KEY1, Keys.KEY2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Follower as(String alias) {
        return new Follower(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Follower as(Name alias) {
        return new Follower(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Follower rename(String name) {
        return new Follower(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follower rename(Name name) {
        return new Follower(name, null);
    }
}
