/*
 * This file is generated by jOOQ.
*/
package tech.codingclub.helix;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import tech.codingclub.helix.tables.Follower;
import tech.codingclub.helix.tables.Member;
import tech.codingclub.helix.tables.Music;
import tech.codingclub.helix.tables.Tweet;
import tech.codingclub.helix.tables.records.FollowerRecord;
import tech.codingclub.helix.tables.records.MemberRecord;
import tech.codingclub.helix.tables.records.MusicRecord;
import tech.codingclub.helix.tables.records.TweetRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>twitter</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<MemberRecord, Long> IDENTITY_MEMBER = Identities0.IDENTITY_MEMBER;
    public static final Identity<TweetRecord, Long> IDENTITY_TWEET = Identities0.IDENTITY_TWEET;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FollowerRecord> KEY_FOLLOWER_UNIQUE_INDEX = UniqueKeys0.KEY_FOLLOWER_UNIQUE_INDEX;
    public static final UniqueKey<MemberRecord> KEY_MEMBER_EMAIL_UNIQUE = UniqueKeys0.KEY_MEMBER_EMAIL_UNIQUE;
    public static final UniqueKey<MemberRecord> KEY_MEMBER_PRIMARY = UniqueKeys0.KEY_MEMBER_PRIMARY;
    public static final UniqueKey<MusicRecord> KEY_MUSIC_CHILD_LINK_UNIQUE = UniqueKeys0.KEY_MUSIC_CHILD_LINK_UNIQUE;
    public static final UniqueKey<TweetRecord> KEY_TWEET_PRIMARY = UniqueKeys0.KEY_TWEET_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FollowerRecord, MemberRecord> KEY1 = ForeignKeys0.KEY1;
    public static final ForeignKey<FollowerRecord, MemberRecord> KEY2 = ForeignKeys0.KEY2;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<MemberRecord, Long> IDENTITY_MEMBER = createIdentity(Member.MEMBER, Member.MEMBER.ID);
        public static Identity<TweetRecord, Long> IDENTITY_TWEET = createIdentity(Tweet.TWEET, Tweet.TWEET.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<FollowerRecord> KEY_FOLLOWER_UNIQUE_INDEX = createUniqueKey(Follower.FOLLOWER, "KEY_follower_unique_index", Follower.FOLLOWER.USER_ID, Follower.FOLLOWER.FOLLOWING_ID);
        public static final UniqueKey<MemberRecord> KEY_MEMBER_EMAIL_UNIQUE = createUniqueKey(Member.MEMBER, "KEY_member_email_UNIQUE", Member.MEMBER.EMAIL);
        public static final UniqueKey<MemberRecord> KEY_MEMBER_PRIMARY = createUniqueKey(Member.MEMBER, "KEY_member_PRIMARY", Member.MEMBER.ID);
        public static final UniqueKey<MusicRecord> KEY_MUSIC_CHILD_LINK_UNIQUE = createUniqueKey(Music.MUSIC, "KEY_music_child_link_UNIQUE", Music.MUSIC.CHILD_LINK);
        public static final UniqueKey<TweetRecord> KEY_TWEET_PRIMARY = createUniqueKey(Tweet.TWEET, "KEY_tweet_PRIMARY", Tweet.TWEET.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<FollowerRecord, MemberRecord> KEY1 = createForeignKey(tech.codingclub.helix.Keys.KEY_MEMBER_PRIMARY, Follower.FOLLOWER, "key1", Follower.FOLLOWER.USER_ID);
        public static final ForeignKey<FollowerRecord, MemberRecord> KEY2 = createForeignKey(tech.codingclub.helix.Keys.KEY_MEMBER_PRIMARY, Follower.FOLLOWER, "key2", Follower.FOLLOWER.FOLLOWING_ID);
    }
}
